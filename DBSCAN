{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DBSCAN","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"5eCo-pE_Sr2u","colab_type":"text"},"cell_type":"markdown","source":["# Downloading the Dataset"]},{"metadata":{"id":"XI55jtYyZoGT","colab_type":"text"},"cell_type":"markdown","source":["## Installed required libraries to download the dataset directly from kaggle"]},{"metadata":{"id":"Y3X9URB-P0xt","colab_type":"code","outputId":"9fca3b3f-2980-4a84-df52-5caa30c1f965","executionInfo":{"status":"ok","timestamp":1556372947179,"user_tz":-330,"elapsed":21860,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"cell_type":"code","source":["!pip install -q kaggle\n","!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!kaggle datasets download -d mlg-ulb/creditcardfraud\n","!unzip creditcardfraud.zip"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /root/.kaggle/kaggle.json'\n","Downloading creditcardfraud.zip to /content\n"," 70% 46.0M/66.0M [00:00<00:00, 50.4MB/s]\n","100% 66.0M/66.0M [00:00<00:00, 112MB/s] \n","Archive:  creditcardfraud.zip\n","  inflating: creditcard.csv          \n"],"name":"stdout"}]},{"metadata":{"id":"01WEP7LJTYRe","colab_type":"code","outputId":"5b480328-a5b1-4058-cd48-6c95eadda6f2","executionInfo":{"status":"ok","timestamp":1556298943957,"user_tz":-330,"elapsed":2879,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["!ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":["creditcard.csv\tcreditcardfraud.zip  kaggle.json  sample_data\n"],"name":"stdout"}]},{"metadata":{"id":"IEVkS2-zZveD","colab_type":"text"},"cell_type":"markdown","source":["## Created a dataframe from the creditcard.csv and a numpy array"]},{"metadata":{"id":"NZ8H_4b5kriU","colab_type":"code","outputId":"796586e6-9d8a-4e2c-dbf2-4a7cbfcb7be0","executionInfo":{"status":"ok","timestamp":1556372949785,"user_tz":-330,"elapsed":17985,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":422}},"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import re\n","lis = []\n","a = []\n","df = pd.read_csv('creditcard.csv')\n","a = np.array(df)\n","print(df.head(5))\n","# loc = 0\n","# classe = 0\n","# for index,row in df.iterrows():\n","#   if row['Class'] != 0:\n","#     loc = index\n","#     classe = row['Class']\n","#     break\n","print(a.shape)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["   Time        V1        V2        V3        V4        V5        V6        V7  \\\n","0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n","1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n","2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n","3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n","4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n","\n","         V8        V9  ...       V21       V22       V23       V24       V25  \\\n","0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n","1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n","2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n","3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n","4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n","\n","        V26       V27       V28  Amount  Class  \n","0 -0.189115  0.133558 -0.021053  149.62      0  \n","1  0.125895 -0.008983  0.014724    2.69      0  \n","2 -0.139097 -0.055353 -0.059752  378.66      0  \n","3 -0.221929  0.062723  0.061458  123.50      0  \n","4  0.502292  0.219422  0.215153   69.99      0  \n","\n","[5 rows x 31 columns]\n","(284807, 31)\n"],"name":"stdout"}]},{"metadata":{"id":"cA1UupxJZ4OV","colab_type":"text"},"cell_type":"markdown","source":["## Made a NxN np.zeros matrix to store the distance b/w two transactions (Basically create a similarity matrix)\n","\n","The dataset has more than 200,000 rows and creating a 200,000 x 200,000 matrix makes colab run out of memory"]},{"metadata":{"id":"ifqXKdDKTwtr","colab_type":"code","outputId":"133e3fcf-42b5-4389-9cbf-f3efdb7bcff8","executionInfo":{"status":"ok","timestamp":1556372949788,"user_tz":-330,"elapsed":13082,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# distance = np.zeros(shape=(284807,284807),dtype=float)\n","dist_test = np.zeros(shape=(5000,5000),dtype=float)\n","y = a[0:3000,-1]\n","a1 = a[0:3000,1:-2]\n","\n","a = a1\n","print(y)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["[0. 0. 0. ... 0. 0. 0.]\n"],"name":"stdout"}]},{"metadata":{"id":"dbXW19tFaQY_","colab_type":"text"},"cell_type":"markdown","source":["## The funtion used to create a similarity matrix\n","\n","Ma'am said use a library"]},{"metadata":{"id":"JZp8yEGvVco_","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.metrics.pairwise import euclidean_distances\n","def calc_dist(a):\n","  dist = euclidean_distances(a,a)\n","  return dist\n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"R4Sse-bET462","colab_type":"code","outputId":"61789d7c-3409-4b51-8da5-9e59c93bd1ab","executionInfo":{"status":"ok","timestamp":1556372958639,"user_tz":-330,"elapsed":1177,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":140}},"cell_type":"code","source":["dist_test = calc_dist(a)\n","print(dist_test)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[[0.         5.21396531 5.52089795 ... 3.98334818 3.98334818 3.97851796]\n"," [5.21396531 0.         6.62497055 ... 5.38155423 5.38155423 5.37679045]\n"," [5.52089795 6.62497055 0.         ... 6.19633644 6.19633644 6.19111475]\n"," ...\n"," [3.98334818 5.38155423 6.19633644 ... 0.         0.         0.02329394]\n"," [3.98334818 5.38155423 6.19633644 ... 0.         0.         0.02329394]\n"," [3.97851796 5.37679045 6.19111475 ... 0.02329394 0.02329394 0.        ]]\n"],"name":"stdout"}]},{"metadata":{"id":"z223dX-3aZKy","colab_type":"text"},"cell_type":"markdown","source":["No clue why I did this"]},{"metadata":{"id":"HTHl1hpbX_M3","colab_type":"code","outputId":"d0b36647-5855-4de2-a9c7-3989b6b5ebf1","executionInfo":{"status":"ok","timestamp":1556372961197,"user_tz":-330,"elapsed":1379,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["minval = np.min(dist_test[np.nonzero(dist_test)])\n","maxval = np.max(dist_test[np.nonzero(dist_test)])\n","\n","print(minval)\n","print(maxval)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["4.2146848510894035e-08\n","71.37455736600576\n"],"name":"stdout"}]},{"metadata":{"id":"tQsMmuHxrwCl","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy\n","\n","def MyDBSCAN(D, eps, MinPts):\n","    \"\"\"\n","    Cluster the dataset `D` using the DBSCAN algorithm.\n","    \n","    MyDBSCAN takes a dataset `D` (a list of vectors), a threshold distance\n","    `eps`, and a required number of points `MinPts`.\n","    \n","    It will return a list of cluster labels. The label -1 means noise, and then\n","    the clusters are numbered starting from 1.\n","    \"\"\"\n","   # This list will hold the final cluster assignment for each point in D.\n","    # There are two reserved values:\n","    #    -1 - Indicates a noise point\n","    #     0 - Means the point hasn't been considered yet.\n","    # Initially all labels are 0.    \n","    labels = [0]*len(D)\n","\n","    # C is the ID of the current cluster.    \n","    C = 0\n","    \n","    # This outer loop is just responsible for picking new seed points--a point\n","    # from which to grow a new cluster.\n","    # Once a valid seed point is found, a new cluster is created, and the \n","    # cluster growth is all handled by the 'expandCluster' routine.\n","    \n","    # For each point P in the Dataset D...\n","    # ('P' is the index of the datapoint, rather than the datapoint itself.)\n","    for P in range(0, len(D)):\n","    \n","        # Only points that have not already been claimed can be picked as new \n","        # seed points.    \n","        # If the point's label is not 0, continue to the next point.\n","        if not (labels[P] == 0):\n","           continue\n","        \n","        # Find all of P's neighboring points.\n","        NeighborPts = checkNeighbour(D, P, eps)\n","        \n","        # If the number is below MinPts, this point is noise. \n","        # This is the only condition under which a point is labeled \n","        # NOISE--when it's not a valid seed point. A NOISE point may later \n","        # be picked up by another cluster as a boundary point (this is the only\n","        # condition under which a cluster label can change--from NOISE to \n","        # something else).\n","        if len(NeighborPts) < MinPts:\n","            labels[P] = -1\n","        # Otherwise, if there are at least MinPts nearby, use this point as the \n","        # seed for a new cluster.    \n","        else: \n","          C += 1\n","          cluster(D, labels, P, NeighborPts, C, eps, MinPts)\n","    \n","    # All data has been clustered!\n","    return labels\n","\n","\n","def cluster(D, labels, P, NeighborPts, C, eps, MinPts):\n","    \"\"\"\n","    Grow a new cluster with label `C` from the seed point `P`.\n","    \n","    This function searches through the dataset to find all points that belong\n","    to this new cluster. When this function returns, cluster `C` is complete.\n","    \n","    Parameters:\n","      `D`      - The dataset (a list of vectors)\n","      `labels` - List storing the cluster labels for all dataset points\n","      `P`      - Index of the seed point for this new cluster\n","      `NeighborPts` - All of the neighbors of `P`\n","      `C`      - The label for this new cluster.  \n","      `eps`    - Threshold distance\n","      `MinPts` - Minimum required number of neighbors\n","    \"\"\"\n","\n","    # Assign the cluster label to the seed point.\n","    labels[P] = C\n","    \n","    # Look at each neighbor of P (neighbors are referred to as Pn). \n","    # NeighborPts will be used as a FIFO queue of points to search--that is, it\n","    # will grow as we discover new branch points for the cluster. The FIFO\n","    # behavior is accomplished by using a while-loop rather than a for-loop.\n","    # In NeighborPts, the points are represented by their index in the original\n","    # dataset.\n","    i = 0\n","    while i < len(NeighborPts):    \n","        \n","        # Get the next point from the queue.        \n","        Pn = NeighborPts[i]\n","       # If Pn was labelled NOISE during the seed search, then we\n","        # know it's not a branch point (it doesn't have enough neighbors), so\n","        # make it a leaf point of cluster C and move on.\n","        if labels[Pn] == -1:\n","           labels[Pn] = C\n","        \n","        # Otherwise, if Pn isn't already claimed, claim it as part of C.\n","        elif labels[Pn] == 0:\n","            # Add Pn to cluster C (Assign cluster label C).\n","            labels[Pn] = C\n","            \n","            # Find all the neighbors of Pn\n","            PnNeighborPts = checkNeighbour(D, Pn, eps)\n","            \n","            # If Pn has at least MinPts neighbors, it's a branch point!\n","            # Add all of its neighbors to the FIFO queue to be searched. \n","            if len(PnNeighborPts) >= MinPts:\n","                NeighborPts = NeighborPts + PnNeighborPts\n","            # If Pn *doesn't* have enough neighbors, then it's a leaf point.\n","            # Don't queue up it's neighbors as expansion points.\n","            #else:\n","                # Do nothing                \n","                #NeighborPts = NeighborPts               \n","        \n","        # Advance to the next point in the FIFO queue.\n","        i += 1        \n","    \n","    # We've finished growing cluster C!\n","\n","\n","def checkNeighbour(D, P, eps):\n","    \"\"\"\n","    Find all points in dataset `D` within distance `eps` of point `P`.\n","    \n","    This function calculates the distance between a point P and every other \n","    point in the dataset, and then returns only those points which are within a\n","    threshold distance `eps`.\n","    \"\"\"\n","    neighbors = []\n","    \n","    # For each point in the dataset...\n","    for Pn in range(0, len(D)):\n","        \n","        # If the distance is below the threshold, add it to the neighbors list.\n","        if numpy.linalg.norm(dist_test[P][Pn]) < eps:\n","           neighbors.append(Pn)\n","            \n","    return neighbors\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"m5_eI7lqvZ5o","colab_type":"code","colab":{}},"cell_type":"code","source":["# from sklearn.datasets.samples_generator import make_blobs\n","# from sklearn.cluster import DBSCAN\n","# from sklearn.preprocessing import StandardScaler\n","# # centers = [[1, 1], [-1, -1], [1, -1]]\n","# # X, labels_true = make_blobs(n_samples=750, centers=centers, cluster_std=0.4,\n","# #                             random_state=0)\n","\n","# X = StandardScaler().fit_transform(a)\n","\n","# ###############################################################################\n","# # My implementation of DBSCAN\n","# #\n","\n","# # Run my DBSCAN implementation.\n","# my_labels = MyDBSCAN(X, eps=3, MinPts=10)\n","# print(my_labels)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"QFf4ZAAYgnuJ","colab_type":"code","outputId":"37c62458-8490-4079-db07-fb24c5b047d9","executionInfo":{"status":"ok","timestamp":1556373083900,"user_tz":-330,"elapsed":116363,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["\n","from sklearn.datasets.samples_generator import make_blobs\n","from sklearn.cluster import DBSCAN\n","from sklearn.preprocessing import StandardScaler\n","\n","X = StandardScaler().fit_transform(a)\n","# X = a\n","# print(X.shape)\n","###############################################################################\n","# My implementation of DBSCAN\n","#\n","\n","# Run my DBSCAN implementation.\n","print('Running my implementation...')\n","my_labels = MyDBSCAN(X, eps=5, MinPts=15)\n","\n","###############################################################################\n","# Scikit-learn implementation of DBSCAN\n","#\n","# X = StandardScaler().fit_transform(a)\n","print('Runing scikit-learn implementation...')\n","db = DBSCAN(eps=5, min_samples=15).fit(X)\n","skl_labels = db.labels_\n","\n","# Scikit learn uses -1 to for NOISE, and starts cluster labeling at 0. I start\n","# numbering at 1, so increment the skl cluster numbers by 1.\n","# for i in range(0, len(skl_labels)):\n","#     if not skl_labels[i] == -1:\n","#         skl_labels[i] += 1\n","\n","num_disagree = 0\n","\n","# Go through each label and make sure they match (print the labels if they \n","# don't)\n"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Running my implementation...\n","Runing scikit-learn implementation...\n"],"name":"stdout"}]},{"metadata":{"id":"dEFC5Yg02N-Q","colab_type":"code","outputId":"f744d0a2-3e5c-4723-9ee4-ecc95ceae227","executionInfo":{"status":"ok","timestamp":1556373093170,"user_tz":-330,"elapsed":966,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"cell_type":"code","source":["print(my_labels)\n","print(y)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","[0. 0. 0. ... 0. 0. 0.]\n"],"name":"stdout"}]},{"metadata":{"id":"SwCfjmG-DIIN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"outputId":"b39e4409-9c23-4577-e117-d2b95dee5150","executionInfo":{"status":"ok","timestamp":1556373113452,"user_tz":-330,"elapsed":1147,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}}},"cell_type":"code","source":["print(len(my_labels))\n","print(y.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["3000\n","(3000,)\n"],"name":"stdout"}]},{"metadata":{"id":"u2Hq2wXF16jb","colab_type":"code","outputId":"3e26ba3c-c302-4b22-8522-93bade4b824b","executionInfo":{"status":"ok","timestamp":1556373116534,"user_tz":-330,"elapsed":945,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["num_disagree = 0\n","for i in range(0, len(my_labels)):\n","    if my_labels[i]-1 - y[i] == 0:\n","#         print('Scikit learn: '+str(y[i])+' mine: '+str(my_labels[i]))\n","        num_disagree += 1\n","\n","# if num_disagree == 0:\n","#     print('PASS - All labels match!')\n","# else:\n","#     print('FAIL - '+ str(num_disagree)+ ' labels don\\'t match.')     \n","    \n","    \n","accu = num_disagree/len(y)\n","print(accu)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["0.9713333333333334\n"],"name":"stdout"}]},{"metadata":{"id":"ESIIZj3-oz25","colab_type":"code","outputId":"134d95c6-353a-486b-b188-4795d4ee2216","executionInfo":{"status":"ok","timestamp":1556373185536,"user_tz":-330,"elapsed":1036,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"cell_type":"code","source":["for i in range(len(my_labels)):\n","  if my_labels[i] == -1:\n","    my_labels[i] = 1\n","  else:\n","    my_labels[i] = 0\n","    \n","print(my_labels)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"],"name":"stdout"}]},{"metadata":{"id":"RZNICNIYjwOS","colab_type":"code","outputId":"125ba125-f83c-4692-ae85-e3327245d929","executionInfo":{"status":"ok","timestamp":1556373346409,"user_tz":-330,"elapsed":1687,"user":{"displayName":"SHREYAS S KULKARNI","photoUrl":"","userId":"00599683737239869610"}},"colab":{"base_uri":"https://localhost:8080/","height":523}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from sklearn.decomposition import PCA\n","\n","\n","# Plotting with PCA\n","pca = PCA(n_components=2)\n","principalComponents = pca.fit_transform(X)\n","principalDf = pd.DataFrame(data = principalComponents\n","             , columns = ['principal component 1', 'principal component 2'])\n","principalDf['Class'] = my_labels\n","finalDf = principalDf\n","fig = plt.figure(figsize = (8,8))\n","ax = fig.add_subplot(1,1,1) \n","ax.set_xlabel('Principal Component 1', fontsize = 15)\n","ax.set_ylabel('Principal Component 2', fontsize = 15)\n","ax.set_title('Predicted', fontsize = 20)\n","targets = [0, 1]\n","colors = ['r', 'g','b']\n","for target, color in zip(targets,colors):\n","    indicesToKeep = finalDf['Class'] == target\n","    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']\n","               , finalDf.loc[indicesToKeep, 'principal component 2']\n","               , c = color\n","               , s = 50)\n","ax.legend(targets)\n","ax.grid()\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nyTfpsWWP1Z37G2DYkGFsMXQLTyxiZma585F8E+Y9O4/LF1xe9/GhGsqRux7J0pOWui63mZnlzkm+\nQZVz8WveWVN3mxHDRnDp1Et9BG9mZoXgJN+g3s7FS3IXvZmZFYqTfIN6qsMNsO17tnUXvZmZFYqT\nfIN6q8O9xdAtBjkiMzOznjnJN6i3OtyjR4we5IjMzMx65iTfoN7qcNf7AWBmZpYXXyffhJ7qcM99\nem7e4ZmZmW3ESb5JrsNtZmbtwn3MZmZmJeUkb2ZmVlLurq+yYs0KZj02iydffZKJW0+ka1IXo4aP\nyjssMzOzPnGSz1RqxG+IDaxat4qRw0Yy47YZzJ4+25PcmJlZW3J3PRvXiK/Mardq3SpWrE3rV65d\nmXOEZmZmzXOSp+d56TfEBmYtnDXIEZmZmfWfkzw9z0u/at0qFr+2eJAjMjMz6z8neXqfl37C6AmD\nHJGZmVn/OcnT+7z0Xbt0DXJEZmZm/eckT+/z0rtGvJmZtSNfQpfpaV56MzOzduQkX8Xz0puZWZm4\nu97MzKyknOTNzMxKyknezMyspJzkzczMSsoD78zMzFqsKFVNneTNzMxaqEhVTd1db2Zm1iJFq2rq\nJG9mZtYiRatq6iRvZmbWIkWrauokb2Zm1iJFq2rqJG9mZtYiRatq6iRvZmbWIkWraupL6MzMzFqo\nSFVNneTNzMxarChVTd1db2ZmVlJO8mZmZiXlJG9mZlZSTvJmZmYl5SRvZmZWUk7yZmZmJeUkb2Zm\nVlJO8mZmZiXlJG9mZlZSTvJmZmYl5SRvZmZWUk7yZmZmJeUkb2ZmVlJO8mZmZiXlJG9mZlZSioi8\nY+gXSa8A/5d3HMA2wPK8g2gBt6N4ytIWt6N4ytKWTmvHByJiTCMv2PZJvigkLYiIvfKOo7/cjuIp\nS1vcjuIpS1vcjvrcXW9mZlZSTvJmZmYl5STfOt/OO4AWcTuKpyxtcTuKpyxtcTvq8Dl5MzOzkvKR\nvJmZWUk5yfeDpMMkPSZpg6S9qtbvKGm1pIez27fyjLMR9dqSPXaqpMWSnpB0QF4xNkvSmZJeqNoP\nU/OOqRmSDsw+88WSvpR3PP0haYmkR7P9sCDveBol6SpJyyQtrFo3WtIdkp7M/m6VZ4yNqtOWtvuO\nSNpe0hxJi7L/s07I1rfVfumhHS3dJ+6u7wdJfwRsAK4ATo6IBdn6HYGfRMQu+UXXnB7a8mHgemAy\n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\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}